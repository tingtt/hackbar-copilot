# Code generated by script.copyschema, DO NOT EDIT.

#*
#* src: schema.graphqls
#*

# GraphQL schema
#
# https://gqlgen.com/getting-started/

type Query

type Mutation

#*
#* src: menu.query.graphqls
#*

extend type Query {
  menu: [MenuGroup!]!
}

type MenuGroup {
  name: String!
  imageURL: String
  flavor: String
  items: [MenuItem!]
  minPriceYen: Float!
}

type MenuItem {
  name: String!
  imageURL: String
  materials: [String!]
  outOfStock: Boolean!
  priceYen: Float!
  recipe: Recipe
}

#*
#* src: order.mutation.graphqls
#*

extend type Mutation {
  order(input: InputOrder!): Order
  updateOrderStatus(input: InputOrderStatusUpdate!): Order
}

input InputOrder {
  menuItemID: String!
}

input InputOrderStatusUpdate {
  id: String!
  status: OrderStatus!
}

#*
#* src: order.query.graphqls
#*

extend type Query {
  orders: [Order!]!
}

type Order {
  id: String!
  customerID: String!
  menuItemID: String!
  timestamps: [OrderStatusUpdateTimestamp!]!
  status: OrderStatus!
  price: Float!
}

type OrderStatusUpdateTimestamp {
  status: OrderStatus!
  timestamp: DateTime!
}

enum OrderStatus {
  ORDERED
  PREPARED
  DELIVERED
  CANCELED
  CHECKEDOUT

  UNKNOWN
}

scalar DateTime

#*
#* src: recipes.mutation.graphqls
#*

extend type Mutation {
  saveRecipe(input: InputRecipeGroup!): RecipeGroup!
}

input InputRecipeGroup {
  name: String!
  imageURL: String
  recipes: [InputRecipe!]
  asMenu: InputAsMenuArgs
}

input InputRecipe {
  name: String!
  recipeType: InputRecipeType
  glassType: InputGlassType
  steps: [InputStep!]
  asMenu: InputAsMenuItemArgs
}

input InputRecipeType {
  name: String! # build, stir, shake etc.
  description: String
  save: Boolean
}

input InputGlassType {
  name: String! # collins, shot, rock, beer etc.
  imageURL: String
  description: String
  save: Boolean
}

input InputStep {
  material: String
  amount: String
  description: String
}

input InputAsMenuArgs {
  flavor: String
}

input InputAsMenuItemArgs {
  imageURL: String
  price: Float!
}

#*
#* src: recipes.query.graphqls
#*

extend type Query {
  recipes: [RecipeGroup!]!
}

type RecipeGroup {
  name: String!
  imageURL: String
  recipes: [Recipe!]
  # asMenu: AsMenu
}

type Recipe {
  name: String!
  type: RecipeType
  glass: GlassType
  steps: [Step!]
  # asMenu: AsMenuItem
}

type RecipeType {
  name: String! # build, stir, shake etc.
  description: String
}

type GlassType {
  name: String! # collins, shot, rock, beer etc.
  imageURL: String
  description: String
}

type Step {
  material: String
  amount: String
  description: String
}

# type AsMenu {
#   flavor: String
# }

# type AsMenuItem {
#   imageURL: String
#   price: Int!
# }

#*
#* src: stock.mutation.graphqls
#*

extend type Mutation {
  updateStock(input: InputStockUpdate!): [Material!]!
}

input InputStockUpdate {
  in: [String!]
  out: [String!]
}

#*
#* src: stock.query.graphqls
#*

extend type Query {
  materials: [Material!]!
}

type Material {
  name: String!
  inStock: Boolean!
}

