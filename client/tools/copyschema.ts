import yargs from "yargs"
import fs from "fs"

// Options:
//   -i, --srcdir   Directory of original schema files.
//       --base     Base schema file.
//   -o, --dest     Output file for merged schema.
const args = await yargs(process.argv.slice(2)).options({
  srcdir: {
    alias: "i",
    type: "string",
    default: "../internal/interface-adapter/handler/graphql/graph/",
    description: "Directory of original schema files.",
  },
  base: {
    type: "string",
    default: "schema.graphqls",
    description: "Base schema file.",
  },
  dest: {
    alias: "o",
    type: "string",
    default: "hackbar-copilot.graphqls",
    description: "Output file for merged schema.",
  },
}).argv

console.log(`Copying and merging schema files from '${args.srcdir}'.`)

/**
 * schemaFilenames
 *
 * Get `*.graphqls` filenames from `--srcdir` and sort them.
 *
 * Sort by:
 *   - [0]: Base schema file. (specified by `--base`)
 *   - [1]: Alphabetically.
 */
const schemaFilenames = fs
  .readdirSync(args.srcdir, { withFileTypes: true })
  .filter((file) => file.isFile() && file.name.endsWith(".graphqls"))
  .map((file) => file.name)
  .sort((a, b) => (a >= b ? 1 : -1))
  .sort((a) => (a === args.base ? -1 : 0))

if (schemaFilenames.length === 0) {
  console.error("No schema files found.")
  process.exit(1)
}
if (schemaFilenames[0] !== args.base) {
  console.error(
    `Base schema file (${args.base}) not found in src dir (${args.srcdir}).`,
  )
  process.exit(1)
}

const mergedSchemaRaw = schemaFilenames.reduce((acc, filename) => {
  console.log(`- ${filename}`)
  const raw = fs.readFileSync(`${args.srcdir}/${filename}`, "utf-8")
  return acc + `#*\n#* src: ${filename}\n#*\n\n` + raw + "\n"
}, "# Code generated by script.copyschema, DO NOT EDIT.\n\n")

console.log(`Writing merged schema to '${args.dest}'.`)

fs.writeFileSync(args.dest, mergedSchemaRaw)
