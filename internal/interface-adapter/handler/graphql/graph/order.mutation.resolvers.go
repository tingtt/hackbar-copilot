package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"hackbar-copilot/internal/domain/order"
	"hackbar-copilot/internal/interface-adapter/handler/graphql/graph/model"
	"hackbar-copilot/internal/interface-adapter/handler/middleware"
	"time"
)

// Order is the resolver for the order field.
func (r *mutationResolver) Order(ctx context.Context, input model.InputOrder) (*model.Order, error) {
	jwtClaims, err := middleware.GetJWT(ctx)
	if err != nil {
		return nil, fmt.Errorf("unauthorized: %w", err)
	}

	menuItemID, err := order.ParseMenuItemID(input.MenuItemID)
	if err != nil {
		return nil, err
	}

	savedOrder, err := r.OrderService.Order(order.CustomerID(jwtClaims.Email), menuItemID)
	if err != nil {
		return nil, err
	}

	return r.orderAdapter.Order(savedOrder), nil
}

// UpdateOrderStatus is the resolver for the updateOrderStatus field.
func (r *mutationResolver) UpdateOrderStatus(ctx context.Context, input model.InputOrderStatusUpdate) (*model.Order, error) {
	_, err := middleware.GetJWT(ctx)
	if err != nil {
		return nil, fmt.Errorf("unauthorized: %w", err)
	}
	// TODO: check permission

	status, err := r.orderAdapter.ApplyStatus(input.Status)
	if err != nil {
		return nil, err
	}

	savedOrder, err := r.Copilot.UpdateOrderStatus(order.ID(input.ID), status, time.Now())
	if err != nil {
		return nil, err
	}

	return r.orderAdapter.Order(savedOrder), nil
}
