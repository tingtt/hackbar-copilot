package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"errors"
	"hackbar-copilot/internal/domain/order"
	"hackbar-copilot/internal/interface-adapter/handler/graphql/graph/model"
	"time"
)

// Order is the resolver for the order field.
func (r *mutationResolver) Order(ctx context.Context, input model.InputOrder) (*model.Order, error) {
	email, err := r.authAdapter.GetEmail(ctx)
	if /* unauthorized */ err != nil {
		return nil, err
	}

	orderMenuItemID := order.MenuItemID{
		ItemName:   input.MenuItemName,
		OptionName: input.MenuItemOptionName,
	}
	savedOrder, err := r.OrderService.Order(order.CustomerEmail(email), input.CustomerName, orderMenuItemID)
	if err != nil {
		return nil, err
	}

	return r.orderAdapter.Order(savedOrder), nil
}

// UpdateOrderStatus is the resolver for the updateOrderStatus field.
func (r *mutationResolver) UpdateOrderStatus(ctx context.Context, input model.InputOrderStatusUpdate) (*model.Order, error) {
	_, err := r.authAdapter.GetEmail(ctx)
	if /* unauthorized */ err != nil {
		return nil, err
	}

	if !r.authAdapter.HasBartenderRole(ctx) {
		return nil, errors.New("forbidden")
	}

	status, err := r.orderAdapter.ApplyStatus(input.Status)
	if err != nil {
		return nil, err
	}

	savedOrder, err := r.BarCounter.UpdateOrderStatus(order.ID(input.ID), status, time.Now())
	if err != nil {
		return nil, err
	}

	return r.orderAdapter.Order(savedOrder), nil
}
