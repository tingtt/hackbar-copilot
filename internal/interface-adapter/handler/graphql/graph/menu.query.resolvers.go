package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.61

import (
	"context"
	"hackbar-copilot/internal/interface-adapter/handler/graphql/graph/model"
	"hackbar-copilot/internal/usecase/copilot"

	"github.com/99designs/gqlgen/graphql"
)

// Menu is the resolver for the menu field.
func (r *queryResolver) Menu(ctx context.Context) ([]*model.MenuGroup, error) {
	menuGroups, err := r.Copilot.ListMenu(copilot.SortMenuGroupByName())
	if err != nil {
		return nil, err
	}

	containsRecipe := false
	for _, field := range graphql.CollectFieldsCtx(ctx, []string{"items"}) {
		if field.Name == "items" {
			for _, field := range graphql.CollectFields(graphql.GetOperationContext(ctx), field.Selections, nil) {
				if field.Name == "recipe" {
					containsRecipe = true
				}
			}
		}
	}
	if containsRecipe {
		recipeGroups, err := r.Copilot.ListRecipes(copilot.SortRecipeGroupByName())
		if err != nil {
			return nil, err
		}
		recipeTypes, err := r.Copilot.FindRecipeType()
		if err != nil {
			return nil, err
		}
		glassTypes, err := r.Copilot.FindGlassType()
		if err != nil {
			return nil, err
		}
		recipeGroupModels := r.recipeAdapter.RecipeGroups(recipeGroups, recipeTypes, glassTypes)
		return r.menuAdapter.MenuGroups(menuGroups, recipeGroupModels), nil
	}
	return r.menuAdapter.MenuGroups(menuGroups, nil), nil
}
