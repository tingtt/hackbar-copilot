package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"errors"
	"hackbar-copilot/internal/domain/order"
	"hackbar-copilot/internal/domain/user"
	"hackbar-copilot/internal/interface-adapter/handler/graphql/graph/model"
	"log/slog"
)

// UserInfo is the resolver for the user field.
func (r *queryResolver) UserInfo(ctx context.Context) (*model.User, error) {
	email, err := r.authAdapter.GetEmail(ctx)
	if /* unauthorized */ err != nil {
		return nil, err
	}

	u, err := r.OrderService.GetUserInfo(order.CustomerEmail(email))
	if err != nil {
		if !errors.Is(err, user.ErrNotFound) {
			return nil, err
		}

		// User not provided, create a new user.
		name, err := r.authAdapter.GetNameFromOAuth2Provider(ctx)
		if err != nil {
			slog.Warn(
				"providing user skipped, because failed to get user name from OAuth2 provider",
				slog.String("error", err.Error()),
			)
		} else {
			u, err := r.OrderService.SetUserInfo(order.CustomerEmail(email), name, true /* autofill */)
			if err != nil {
				slog.Error("failed to set user info", slog.String("error", err.Error()))
			}
			return userAdapter(u).apply(), nil
		}
	}

	return userAdapter(u).apply(), nil
}
