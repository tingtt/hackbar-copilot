package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"hackbar-copilot/internal/interface-adapter/handler/graphql/graph/model"
	"hackbar-copilot/internal/usecase/recipes"
	"hackbar-copilot/internal/utils/sliceutil"
)

// Recipes is the resolver for the recipes field.
func (r *queryResolver) Recipes(ctx context.Context) ([]*model.RecipeGroup, error) {
	recipeGroups, err := r.deps.Recipes.Find()
	if err != nil {
		return nil, err
	}
	recipeTypes, err := r.deps.Recipes.FindRecipeType()
	if err != nil {
		return nil, err
	}
	glassTypes, err := r.deps.Recipes.FindGlassType()
	if err != nil {
		return nil, err
	}
	return sliceutil.Map(recipeGroups, convertRecipeGroup(recipeTypes, glassTypes)), nil
}

func convertRecipeGroup(
	recipeTypes map[string]model.RecipeType,
	glassTypes map[string]model.GlassType,
) func(recipes.RecipeGroup) *model.RecipeGroup {
	return func(recipeGroup recipes.RecipeGroup) *model.RecipeGroup {
		return &model.RecipeGroup{
			Name:     recipeGroup.Name,
			ImageURL: recipeGroup.ImageURL,
			Recipes:  sliceutil.Map(recipeGroup.Recipes, convertRecipe(recipeTypes, glassTypes)),
		}
	}
}

func convertRecipe(
	recipeTypes map[string]model.RecipeType,
	glassTypes map[string]model.GlassType,
) func(recipe recipes.Recipe) *model.Recipe {
	return func(recipe recipes.Recipe) *model.Recipe {
		r := model.Recipe{
			Name:  recipe.Name,
			Steps: recipe.Steps,
		}
		recipeType, exists := recipeTypes[recipe.Type]
		if exists {
			r.Type = &recipeType
		}
		glassType, exists := glassTypes[recipe.Glass]
		if exists {
			r.Glass = &glassType
		}
		return &r
	}
}
